package edu.orangecoastcollege.cs272.btomita.capstone.controller;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Scanner;

import edu.orangecoastcollege.cs272.btomita.capstone.model.DBModel;
import edu.orangecoastcollege.cs272.btomita.capstone.model.Restaurant;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public final class Controller
{
private static Controller theOne;

    private static final String DB_NAME = "cs272.db";
    private static final String TABLE_NAME = "hb";
    private static final String[] FIELD_NAMES = { "id", "name", "price", "reviews", "category", "street", "city", "phone" };
    private static final String [] FIELD_TYPES = { "INTEGER PRIMARY KEY", "TEXT", "TEXT", "INTEGER", "TEXT", "TEXT", "TEXT", "TEXT" };
    private static final String DATA_FILE = "Huntington Beach.csv";

    private ObservableList<Restaurant> mAllRestaurantsList;
    private DBModel mDB;

    private Controller(){};

    public static Controller getInstance()
    {
        if(theOne == null)
        {
            theOne = new Controller();
            theOne.mAllRestaurantsList = FXCollections.observableArrayList();

            try
            {
                theOne.mDB = new DBModel(DB_NAME, TABLE_NAME, FIELD_NAMES, FIELD_TYPES);
                theOne.initializeDBFromFile();

            }
            catch (SQLException e)
            {
                e.printStackTrace();
            }
        }
        return theOne;
    }

    private int initializeDBFromFile() throws SQLException
    {
        int recordsCreated = 0;

        if(theOne.mDB.getRecordCount() > 0)
            return recordsCreated;

        try
        {
            Scanner fileScanner = new Scanner(new File(DATA_FILE));
            fileScanner.nextLine();

            while(fileScanner.hasNextLine())
            {
                String[] data = fileScanner.nextLine().split(",");
                String[] values = new String[FIELD_NAMES.length - 1];
                // "name", "price", "reviews", "category", "street", "city", "phone"
                values[0] = data[5].replaceAll("'", " ''");
                values[1] = data[8];
                values[2] = data[7];
                values[3] = data[9].replaceAll("-", ",");
                values[4] = data[13];
                values[5] = data[14];
                values[6] = data[15];
                
                theOne.mDB.createRecord(Arrays.copyOfRange(FIELD_NAMES, 1, FIELD_NAMES.length), values);
                recordsCreated++;
            }
            fileScanner.close();
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }

        return recordsCreated;
    }
    
    public boolean addCar(String name, String price, int reviews, String category, String street, String city, String phone)
    {
    	String[] values = {name, price, String.valueOf(reviews), category, street, city, phone};
    	
    	try
    	{
    		int id = theOne.mDB.createRecord(Arrays.copyOfRange(FIELD_NAMES, 1, FIELD_NAMES.length), values);
    	}
    }
}
